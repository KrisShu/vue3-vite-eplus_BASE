@import './theme.scss';

// 从主题色map中取出对应颜色
@function themed($key) {
    /**
      ‌Sass中的map-get函数‌用于从一个map（映射）中获取指定键对应的值。
        语法：map-get($map, $key)
        参数：
          $map：定义好的map。
          $key：需要遍历的键。
        案例：
        $social-colors: (dribble: #ea4c89, facebook: #3b5998, github: #171515, google: #db4437, twitter: #55acee);

        要获取facebook键值对应的值#3b5998，可以使用map-get函数：
        .btn-facebook {
            color: map-get($social-colors, facebook);
        }

    **/
    @return map-get($theme-map, $key);
}

// 切换主题时 获取不同的主题色值
@mixin themeify {
    /**
   ‌     SASS的@each指令‌用于遍历一个列表或映射中的每个元素，并对每个元素执行相同的操作。
        语法：@each $variable in <list or map> {
                // statements
                }
        参数：$variable是一个变量，用于存储列表或映射中的每个元素的值。
        案例1：
            $sizes: 40px, 50px, 80px;
            @each $size in $sizes {
                .icon-#{$size} {
                    font-size: $size;
                    height: $size;
                    width: $size;
                }
            }

            编译后：
            .icon-40px { font-size: 40px; height: 40px; width: 40px; }
            .icon-50px { font-size: 50px; height: 50px; width: 50px; }
            .icon-80px { font-size: 80px; height: 80px; width: 80px; }
        案例2：
            $icons: (eye: "\f112", start: "\f12e", stop: "\f12f");
            @each $name, $glyph in $icons {
                .icon-#{$name}:before {
                    display: inline-block;
                    font-family: "Icon Font";
                    content: $glyph;
                }
            }
            编译后：
            .icon-eye:before { display: inline-block; font-family: "Icon Font"; content: "\f112"; }
            .icon-start:before { display: inline-block; font-family: "Icon Font"; content: "\f12e"; }
            .icon-stop:before { display: inline-block; font-family: "Icon Font"; content: "\f12f"; }
    **/

    @each $theme-name, $theme-map in $themes {
        //*  !global 把局部变量强升为全局变量
        $theme-map: $theme-map !global;
        //*  判断html的data-theme的属性值  #{}是sass的插值表达式
        //*  & sass嵌套里的父容器标识   @content是混合器插槽，像vue的slot
        [data-theme='#{$theme-name}'] & {
            @content;
        }
    }
}

// 获取渐变背景色
@mixin gradient_background($start-color, $end-color) {
    @include themeify {
        background: linear-gradient(
            to bottom,
            themed($start-color),
            themed($end-color)
        ) !important;
        transition: background-position 0.6s;
    }
}

// 获取背景颜色
@mixin background_color($color) {
    @include themeify {
        background-color: themed($color) !important;
    }
}

// 获取字体颜色
@mixin font_color($color) {
    @include themeify {
        color: themed($color) !important;
    }
}

// 获取边框颜色
@mixin border_color($color) {
    @include themeify {
        border-color: themed($color) !important;
    }
}
